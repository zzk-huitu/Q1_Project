Ext.data.JsonP.Extensible_calendar_data_EventMappings({"tagname":"class","name":"Extensible.calendar.data.EventMappings","autodetected":{},"files":[{"filename":"EventMappings.js","href":"EventMappings.html#Extensible-calendar-data-EventMappings"}],"extends":null,"members":[],"alternateClassNames":[],"aliases":{},"id":"class-Extensible.calendar.data.EventMappings","short_doc":"A simple object that provides the field definitions for\nEventRecords so that they can be easily overridden. ...","component":false,"superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/EventMappings.html#Extensible-calendar-data-EventMappings' target='_blank'>EventMappings.js</a></div></pre><div class='doc-contents'><p>A simple object that provides the field definitions for\nEventRecords so that they can be easily overridden.</p>\n\n<p>There are several ways of overriding the default Event record mappings to customize how\nExt records are mapped to your back-end data model. If you only need to change a handful\nof field properties you can directly modify the EventMappings object as needed and then\nreconfigure it. The simplest approach is to only override specific field attributes:</p>\n\n<pre><code>var M = <a href=\"#!/api/Extensible.calendar.data.EventMappings\" rel=\"Extensible.calendar.data.EventMappings\" class=\"docClass\">Extensible.calendar.data.EventMappings</a>;\n    M.Title.mapping = 'evt_title';\n    M.Title.name = 'EventTitle';\n    Extensible.calendar.EventRecord.reconfigure();\n</code></pre>\n\n<p>You can alternately override an entire field definition using object-literal syntax, or\nprovide your own custom field definitions (as in the following example). Note that if you do\nthis, you <strong>MUST</strong> include a complete field definition, including the <tt>type</tt> attribute\nif the field is not the default type of <tt>string</tt>.</p>\n\n<pre><code>// Add a new field that does not exist in the default EventMappings:\nExtensible.calendar.data.EventMappings.Timestamp = {\n    name: 'Timestamp',\n    mapping: 'timestamp',\n    type: 'date'\n};\nExtensible.calendar.EventRecord.reconfigure();\n</code></pre>\n\n<p>If you are overriding a significant number of field definitions it may be more convenient\nto simply redefine the entire EventMappings object from scratch. The following example\nredefines the same fields that exist in the standard EventRecord object but the names and\nmappings have all been customized. Note that the name of each field definition object\n(e.g., 'EventId') should <strong>NOT</strong> be changed for the default EventMappings fields as it\nis the key used to access the field data programmatically.</p>\n\n<pre><code><a href=\"#!/api/Extensible.calendar.data.EventMappings\" rel=\"Extensible.calendar.data.EventMappings\" class=\"docClass\">Extensible.calendar.data.EventMappings</a> = {\n    EventId:     {name: 'ID', mapping:'evt_id', type:'int'},\n    CalendarId:  {name: 'CalID', mapping: 'cal_id', type: 'int'},\n    Title:       {name: 'EvtTitle', mapping: 'evt_title'},\n    StartDate:   {name: 'StartDt', mapping: 'start_dt', type: 'date', dateFormat: 'c'},\n    EndDate:     {name: 'EndDt', mapping: 'end_dt', type: 'date', dateFormat: 'c'},\n    RRule:       {name: 'RecurRule', mapping: 'recur_rule'},\n    Location:    {name: 'Location', mapping: 'location'},\n    Notes:       {name: 'Desc', mapping: 'full_desc'},\n    Url:         {name: 'LinkUrl', mapping: 'link_url'},\n    IsAllDay:    {name: 'AllDay', mapping: 'all_day', type: 'boolean'},\n    Reminder:    {name: 'Reminder', mapping: 'reminder'},\n    // We can also add some new fields that do not exist in the standard EventRecord:\n    CreatedBy:   {name: 'CreatedBy', mapping: 'created_by'},\n    IsPrivate:   {name: 'Private', mapping:'private', type:'boolean'}\n};\n// Don't forget to reconfigure!\nExtensible.calendar.EventRecord.reconfigure();\n</code></pre>\n\n<p><strong>NOTE:</strong> Any record reconfiguration you want to perform must be done <strong>PRIOR to</strong>\ninitializing your data store, otherwise the changes will not be reflected in the store's records.</p>\n\n<p>Another important note is that if you alter the default mapping for <tt>EventId</tt>, make sure to add\nthat mapping as the <tt>idProperty</tt> of your data reader, otherwise it won't recognize how to\naccess the data correctly and will treat existing records as phantoms. Here's an easy way to make sure\nyour mapping is always valid:</p>\n\n<pre><code>var reader = new Ext.data.reader.Json({\n    totalProperty: 'total',\n    successProperty: 'success',\n        root: 'data',\n        messageProperty: 'message',\n    // read the id property generically, regardless of the mapping:\n    idProperty: Extensible.calendar.data.EventMappings.EventId.mapping  || 'id',\n    // this is also a handy way to configure your reader's fields generically:\n    fields: Extensible.calendar.EventRecord.prototype.fields.getRange()\n});\n</code></pre>\n</div><div class='members'></div></div>","meta":{}});